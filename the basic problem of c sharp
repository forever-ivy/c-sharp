//数组的输入问题
int[] a = Array.ConvertAll(Console.ReadLine().Split(new char  [] {' ','!','?','*' ,','},StringSplitOptions.RemoveEmptyEntries), int .Parse);
char[] a = Console.ReadLine().Replace(" ", "").ToCharArray();

//数组内数据的输出
Console.WriteLine(string.Join(" ", a));

//冒泡排序
n=string.length;
for(int i=0;i<n-1;i++)
{
    for(int j=0;j<n-i-1;j++)
   {
          //顺序交换
   }


}

//字典问题
字母赋值：dic[s[i] - (int)'A']++;
输出字母：string k=((char)((int)'A' + j)).ToString();   //(int j=0;j<26;j++)

//求一个数每一位的数字
int i,sum=0;
int z=i%10;
int i=i/10;
sum+=z;

//数组最大值，一维数组
n.max（）

//string类型可以直接提取单个不同位置的char，区别与数组
 string a = Console.ReadLine();
            for (int i = 0; i < a.Length; i++)
            {
                Console.WriteLine(a[i]);
            }

//char可以直接比较
s[i] >= 'A' && s[i] <= 'Z'

//字符串加字符
string s.padleft(n,' ');

//去重问题
//留后面
string w;
 n=w.length;
string result="";
for(int i=0;i<n;i++)
{
   int j
    for(j=i+1;j<n;j++)
    {
        if(w[i]=w[j])
          { 
               break;
          }
     }
    if(j==n)
   {
       result+=w[i]
    }
}
//留前面
string w;
 n=w.length;
string result="";
for(int i=n-1;i>=0;i--)
{
   int j
    for(j=i-1;j>=0;j--)
    {
        if(w[i]=w[j])
          { 
               break;
          }
     }
    if(j==-1)
   {
       result=w[i]+result;
    }
}

//对于n行n列的列表进行输入
int n = int.Parse(Console.ReadLine());
int[,] k = new int[n, n];
            for(int i=0;i<n;i++)
            {
                int[] z = Array.ConvertAll(Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries), int.Parse);
                ;
                for (int j = 0; j < n; j++)
                {
                    k[i,j]=z[j];
 
                }
            }

//矩形的列表则是在此基础上修改
int[] num= Array.ConvertAll(Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries), int.Parse);
            int m = num[0];
            int n = num[1];
            int[,] k = new int[m, n];
            for(int i=0;i<m;i++)
            {
                int[] z = Array.ConvertAll(Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries), int.Parse);
                ;
                for (int j = 0; j < n; j++)
                {
                    k[i,j]=z[j];
 
                }
            }

//二维数组相乘
int[] n = Array.ConvertAll(Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries), int
                .Parse);
            int[,] s = new int[n[0], n[1]];
            int[,] v = new int[n[1], n[2]];
            for (int i = 0; i < n[0]; i++)
            {
                int[] z = Array.ConvertAll(Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries), int.Parse);
                for (int j = 0; j < n[1]; j++)
                {
                    s[i, j] = z[j];

                }
            }
            for (int i = 0; i < n[1]; i++)
            {
                int[] z= Array.ConvertAll(Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries), int.Parse);
                for (int j = 0; j < n[2]; j++)
                {
                    v[i, j] = z[j];

                }
            }
            int[,] result = new int[n[0], n[2]];
            
            for (int i = 0; i < n[0]; i++)
            {
               
                for (int j = 0; j < n[2];j++ )
                {
                    int sum = 0;
                    for(int k=0;k<n[1];k++)
                    {
                        sum+=s[i, k] * v[k,j];

                    }
                    result[i,j]=sum;
                   
                   }

                }
            for (int i = 0; i < n[0]; i++)
            {
                for (int j = 0; j < n[2]; j++)
                {
                    if (j == n[2] - 1)
                    {
                        Console.WriteLine(result[i, j]);
                    }
                    else
                    {
                        Console.Write(result[i,j]+" ");
                    }
                }
            }
//一点关于数组中两个数的利用的经验之谈，在涉及此种情况时，我们不仅要写两个循环，控制i和j，同时需要中间变量k，以达到不同数组间运算的目的


//自定义输出斐波那契数
static double feibo(double n)
        {
            double z;
            if (n == 1 || n == 2)
            {
                z = 1;
                return z;
            }

            else
            {
                double a=1,b=1,t=0;
                for (double j = 3; j <= n; j++)
                {
                    t = a + b;
                    a = b;
                    b = t;

                }
                return t;
            }


//自定义判断是否为素数
static bool primenumber(double n)
        {
            
            
            if (n == 1)
            {
                return false;
            }
            int i;
            for(i=2;i <=Math.Sqrt(n);i++)
            {
                if(n%i==0)
                {
                    break;
                }
            }
            if(i==(int)Math.Sqrt(n)+1)
            {
                return true;
            }
            else
            {
                return false;

            }
            
           
            }




